version: 2.1
orbs:
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1
  # different jobs are calles later in the workflows sections
jobs:
  build:
    docker:
      # the base image can run most needed actions with orbs
      - image: "cimg/base:stable"
    steps:
      - node/install:
          node-version: "16.15.1"
      - checkout
      - aws-cli/setup
      - eb/setup
      # install dependencies in both apps
      - run:
          name: Installing Backend
          command: |
            echo "TODO: Install dependencies in the the backend API "
            npm run backend:install
      - run:
          name: Installing Frontend
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            npm run frontend:install
      # build front-end and backend
      - run:
          name: Building Backend
          command: |
            npm run backend:build
      - run:
          name: Building Frontend
          command: |
            npm run frontend:build
  deploy:
    docker:
      - image: "cimg/base:stable"
      # more setup needed for aws, node, elastic beanstalk
    steps:
      - node/install:
          node-version: '16.15.1' 
      - eb/setup
      - aws-cli/setup
      - checkout
      - run:
          name: Envs
          # TODO: Install, build, deploy in both apps
          command: |
            echo "# TODO: Install, build, deploy in both apps"
            eb init udagram-api-dev --platform node.js --region us-east-1
            echo "# Deploy"
            npm run deploy
            echo "# use EB"
            eb use udagram-api-dev
            echo "# EB setenvs"
            eb setenv POSTGRES_HOST="database-udagram.czionxkuuvvv.us-east-1.rds.amazonaws.com" DB_PORT=5432 POSTGRES_PASSWORD="postgres" POSTGRES_USERNAME="postgres" POSTGRES_DB="postgres" JWT_SECRET="hello-from-other-side" PORT=3000
      
workflows:
  udagram:
    jobs:
      - build
      - hold:
          filters:
            branches:
              only:
                - main
          type: approval
      - deploy:
          requires:
            - hold